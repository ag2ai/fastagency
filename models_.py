# generated by fastapi-codegen:
#   filename:  openapi.json
#   timestamp: 2024-10-31T08:32:05+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional, Union

from pydantic import BaseModel, Field, RootModel, constr
from typing_extensions import Literal


class F30d78c250ad1209aef755ddde02bb131e1749b705985f0e9f1b007c900b98e2TextContent(
    BaseModel
):
    text: constr(min_length=1, max_length=4096) = Field(
        ..., description='Content of the message being sent.'
    )
    previewUrl: Optional[bool] = Field(
        None,
        description='Allows for URL preview from within the message. If set to `true`, the message content must contain a URL starting with `https://` or `http://`. Defaults to `false`.',
    )


class F30d78c250ad1209aef755ddde02bb131e1749b705985f0e9f1b007c900b98e2UrlOptions(
    BaseModel
):
    shortenUrl: Optional[bool] = Field(
        True,
        description='Enable shortening of the URLs within a message. Set this to `true`, if you want to set up other URL options.',
    )
    trackClicks: Optional[bool] = Field(
        True,
        description='Enable tracking of short URL clicks within a message: which URL was clicked, how many times, and by whom.',
    )
    trackingUrl: Optional[str] = Field(
        None,
        description='The URL of your callback server on to which the Click report will be sent.',
    )
    removeProtocol: Optional[bool] = Field(
        False,
        description='Remove a protocol, such as `https://`, from links to shorten a message. Note that some mobiles may not recognize such links as a URL.',
    )
    customDomain: Optional[str] = Field(
        None,
        description='Select a predefined custom domain to use when generating a short URL.',
    )


class F30d78c250ad1209aef755ddde02bb131e1749b705985f0e9f1b007c900b98e2SingleMessageStatus(
    BaseModel
):
    groupId: Optional[int] = Field(None, description='Status group ID.', examples=[1])
    groupName: Optional[str] = Field(
        None, description='Status group name.', examples=['PENDING']
    )
    id: Optional[int] = Field(None, description='Status ID.', examples=[7])
    name: Optional[str] = Field(
        None, description='Status name.', examples=['PENDING_ENROUTE']
    )
    description: Optional[str] = Field(
        None,
        description='Human-readable description of the status.',
        examples=['Message sent to next instance'],
    )
    action: Optional[str] = Field(
        None, description='Action that should be taken to eliminate the error.'
    )


class A4e0c51a24a360282e1a40c61554d239555404b786d84603912030fc4cdbb512MediaType(Enum):
    IMAGE = 'IMAGE'
    VIDEO = 'VIDEO'


class A4e0c51a24a360282e1a40c61554d239555404b786d84603912030fc4cdbb512ReferralMediaVideo(
    BaseModel
):
    type: Optional[
        A4e0c51a24a360282e1a40c61554d239555404b786d84603912030fc4cdbb512MediaType
    ] = None
    url: Optional[str] = Field(
        None, description='URL that leads to the video that end user saw and clicked.'
    )


class F30d78c250ad1209aef755ddde02bb131e1749b705985f0e9f1b007c900b98e2TextMessage(
    BaseModel
):
    from_: constr(min_length=1, max_length=24) = Field(
        ...,
        alias='from',
        description="Registered WhatsApp sender number. Must be in international format and comply with [WhatsApp's requirements](https://www.infobip.com/docs/whatsapp/get-started#phone-number-what-you-need-to-know).",
    )
    to: constr(min_length=1, max_length=24) = Field(
        ..., description='Message recipient number. Must be in international format.'
    )
    messageId: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description='The ID that uniquely identifies the message sent.'
    )
    content: F30d78c250ad1209aef755ddde02bb131e1749b705985f0e9f1b007c900b98e2TextContent
    callbackData: Optional[constr(min_length=0, max_length=4000)] = Field(
        None,
        description='Custom client data that will be included in a [Delivery Report](#channels/whatsapp/receive-whatsapp-delivery-reports).',
    )
    notifyUrl: Optional[constr(min_length=0, max_length=2048)] = Field(
        None,
        description='The URL on your callback server to which delivery and seen reports will be sent. [Delivery report format](#channels/whatsapp/receive-whatsapp-delivery-reports), [Seen report format](#channels/whatsapp/receive-whatsapp-seen-reports).',
    )
    urlOptions: Optional[
        F30d78c250ad1209aef755ddde02bb131e1749b705985f0e9f1b007c900b98e2UrlOptions
    ] = None
    entityId: Optional[constr(min_length=0, max_length=255)] = Field(
        None,
        description='Required for entity use in a send request for outbound traffic. Returned in notification events. For more details, see our [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management).',
    )
    applicationId: Optional[constr(min_length=0, max_length=255)] = Field(
        None,
        description='Required for application use in a send request for outbound traffic. Returned in notification events. For more details, see our [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management).',
    )


class F30d78c250ad1209aef755ddde02bb131e1749b705985f0e9f1b007c900b98e2SingleMessageInfo(
    BaseModel
):
    to: Optional[str] = Field(
        None,
        description='The destination address of the message.',
        examples=['385977666618'],
    )
    messageCount: Optional[int] = Field(
        None, description='Number of messages required to deliver.', examples=[1]
    )
    messageId: Optional[str] = Field(
        None,
        description='The ID that uniquely identifies the message sent. If not passed, it will be automatically generated and returned in a response.',
        examples=['06df139a-7eb5-4a6e-902e-40e892210455'],
    )
    status: Optional[
        F30d78c250ad1209aef755ddde02bb131e1749b705985f0e9f1b007c900b98e2SingleMessageStatus
    ] = None


class A4e0c51a24a360282e1a40c61554d239555404b786d84603912030fc4cdbb512ReferralMedia2(
    A4e0c51a24a360282e1a40c61554d239555404b786d84603912030fc4cdbb512ReferralMediaVideo
):
    type: Literal['VIDEO']


class A4e0c51a24a360282e1a40c61554d239555404b786d84603912030fc4cdbb512ReferralMediaImage(
    BaseModel
):
    type: Optional[
        A4e0c51a24a360282e1a40c61554d239555404b786d84603912030fc4cdbb512MediaType
    ] = None
    url: Optional[str] = Field(
        None, description='URL that leads to the image that end user saw and clicked.'
    )


class A4e0c51a24a360282e1a40c61554d239555404b786d84603912030fc4cdbb512ReferralMedia1(
    A4e0c51a24a360282e1a40c61554d239555404b786d84603912030fc4cdbb512ReferralMediaImage
):
    type: Literal['IMAGE']


class A4e0c51a24a360282e1a40c61554d239555404b786d84603912030fc4cdbb512ReferralMedia(
    RootModel[
        Union[
            A4e0c51a24a360282e1a40c61554d239555404b786d84603912030fc4cdbb512ReferralMedia1,
            A4e0c51a24a360282e1a40c61554d239555404b786d84603912030fc4cdbb512ReferralMedia2,
        ]
    ]
):
    root: Union[
        A4e0c51a24a360282e1a40c61554d239555404b786d84603912030fc4cdbb512ReferralMedia1,
        A4e0c51a24a360282e1a40c61554d239555404b786d84603912030fc4cdbb512ReferralMedia2,
    ] = Field(
        ..., description='Media information of included referral.', discriminator='type'
    )
